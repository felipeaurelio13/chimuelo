// üîç DEBUG ESPEC√çFICO PARA FLUJO MULTIAGENTE CON PDF/IM√ÅGENES
// Simula exactamente el flujo que est√° fallando

console.log('üîç INICIANDO DEBUG DEL FLUJO MULTIAGENTE');
console.log('');

// Simular el error espec√≠fico "undefined is not an object (evaluating 'K.primaryType')"
function simulateMultiAgentFlow() {
  console.log('ü§ñ SIMULANDO FLUJO MULTIAGENTE COMPLETO');
  console.log('');

  // Paso 1: Simular DocumentAnalysisModal.analyzeDocument()
  console.log('üìã PASO 1: DocumentAnalysisModal.analyzeDocument()');
  
  const mockPDFFile = {
    name: 'boleta_medica.pdf',
    type: 'application/pdf',
    size: 156789,
    lastModified: Date.now()
  };
  
  const agentInput = {
    id: `doc_${Date.now()}`,
    type: mockPDFFile.type === 'application/pdf' ? 'pdf' : 'file',
    content: mockPDFFile,
    timestamp: new Date(),
    userId: 'current_user',
    context: {
      documentType: 'general',
      fileName: mockPDFFile.name,
      fileSize: mockPDFFile.size
    }
  };
  
  console.log('‚úÖ AgentInput creado:', {
    id: agentInput.id,
    type: agentInput.type,
    fileName: agentInput.context.fileName
  });
  console.log('');
  
  // Paso 2: Simular MultiAgentCoordinator.processInput()
  console.log('üìã PASO 2: MultiAgentCoordinator.processInput()');
  
  try {
    // 2.1: Clasificar input
    console.log('üîç Sub-paso 2.1: ClassifierAgent.classifyInput()');
    const mockClassification = simulateClassifierAgent(agentInput);
    console.log('‚úÖ Clasificaci√≥n:', mockClassification);
    console.log('');
    
    // 2.2: Extraer contenido 
    console.log('üëÅÔ∏è Sub-paso 2.2: VisionAgent.analyzeContent()');
    const mockExtractedContent = simulateVisionAgent(agentInput);
    console.log('‚úÖ Contenido extra√≠do:', mockExtractedContent);
    console.log('');
    
    // 2.3: Rutear a agente especializado
    console.log('üéØ Sub-paso 2.3: IntelligentRouter.routeToAgent()');
    const mockAgentOutput = simulateRouterAndSpecializedAgent(mockClassification, mockExtractedContent);
    console.log('‚úÖ Salida del agente:', mockAgentOutput);
    console.log('');
    
    // 2.4: Actualizar ficha
    console.log('üë∂ Sub-paso 2.4: FichaMAxiAgent.updateFicha()');
    simulateFichaMaxiAgent(mockAgentOutput);
    console.log('‚úÖ Ficha actualizada');
    console.log('');
    
  } catch (error) {
    console.log('‚ùå ERROR en flujo multiagente:', error.message);
    console.log('üìç Stack:', error.stack);
  }
}

// Simular ClassifierAgent
function simulateClassifierAgent(input) {
  console.log('   üîÑ Analizando tipo de input...');
  
  // Simular classifyInput()
  const inputAnalysis = {
    mimeType: input.content.type,
    size: input.content.size,
    name: input.content.name,
    suggestedType: 'pdf'
  };
  
  console.log('   üìä Input analysis:', inputAnalysis);
  
  // Simular l√≥gica de clasificaci√≥n b√°sica
  const text = JSON.stringify(input).toLowerCase();
  let classification;
  
  if (text.includes('boleta') || text.includes('factura') || text.includes('pdf')) {
    classification = {
      inputType: 'pdf',
      contentType: 'administrative_document',
      confidence: 0.8,
      routingRecommendation: 'administrative_agent'
    };
  } else {
    classification = {
      inputType: 'pdf',
      contentType: 'medical_document',
      confidence: 0.6,
      routingRecommendation: 'medical_agent'
    };
  }
  
  console.log('   üéØ Clasificaci√≥n final:', classification);
  return classification;
}

// Simular VisionAgent - AQU√ç PUEDE ESTAR EL PROBLEMA
function simulateVisionAgent(input) {
  console.log('   üîÑ VisionAgent procesando...');
  
  try {
    // Simular: if (input.content instanceof File)
    console.log('   üìã Verificando que input.content es File...');
    
    if (!(input.content && input.content.type)) {
      throw new Error('Input content is not a proper File object');
    }
    
    console.log('   ‚úÖ Input.content v√°lido');
    
    // Simular: const visionService = await import('./visionAnalysisService');
    console.log('   üì¶ Importando visionAnalysisService...');
    
    // Simular: visionService.visionAnalysisService.analyzeDocument()
    console.log('   üîÑ Llamando visionAnalysisService.analyzeDocument()...');
    
    const mockVisionRequest = {
      imageFile: input.content,
      documentType: 'general'
    };
    
    console.log('   üìã Vision request:', {
      fileName: mockVisionRequest.imageFile.name,
      fileType: mockVisionRequest.imageFile.type,
      documentType: mockVisionRequest.documentType
    });
    
    // Simular el flujo interno de visionAnalysisService
    const mockResult = simulateVisionAnalysisService(mockVisionRequest);
    
    console.log('   üìä Vision result:', mockResult.success ? 'SUCCESS' : 'FAILED');
    
    if (!mockResult.success) {
      throw new Error(`VisionAnalysisService error: ${mockResult.error}`);
    }
    
    return mockResult.data;
    
  } catch (error) {
    console.log('   ‚ùå ERROR en VisionAgent:', error.message);
    throw error;
  }
}

// Simular visionAnalysisService.analyzeDocument() - POSIBLE PUNTO DE FALLA
function simulateVisionAnalysisService(request) {
  console.log('     üîÑ VisionAnalysisService.analyzeDocument()...');
  
  try {
    // Simular: if (request.imageFile.type === 'application/pdf')
    console.log('     üìã Verificando tipo de archivo:', request.imageFile.type);
    
    if (request.imageFile.type === 'application/pdf') {
      console.log('     üìÑ Es PDF, llamando analyzePDFDocument()...');
      return simulateAnalyzePDFDocument(request);
    } else {
      console.log('     üñºÔ∏è Es imagen, procesando con Vision API...');
      // Aqu√≠ ir√≠a el procesamiento de imagen
      throw new Error('SIMULACI√ìN: Image processing would happen here');
    }
    
  } catch (error) {
    console.log('     ‚ùå ERROR en VisionAnalysisService:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// Simular analyzePDFDocument()
function simulateAnalyzePDFDocument(request) {
  console.log('     üîÑ analyzePDFDocument()...');
  
  try {
    // Simular la creaci√≥n del fallbackData
    const fallbackData = {
      documentType: request.documentType,
      patientInfo: {
        name: "Informaci√≥n no extra√≠da de PDF",
        dateOfBirth: undefined,
        age: undefined
      },
      extractedData: {
        date: new Date().toISOString().split('T')[0],
        provider: "Documento PDF procesado",
        mainFindings: [
          "PDF detectado - Se requiere conversi√≥n a imagen para an√°lisis completo"
        ],
        medications: [],
        measurements: {
          other: {}
        },
        recommendations: [
          "Revisar documento PDF manualmente"
        ],
        urgentFlags: []
      },
      analysisNotes: {
        confidence: 'bajo',
        allergyWarnings: [],
        ageAppropriate: "Requiere revisi√≥n manual",
        requiresPhysicianReview: true
      }
    };
    
    console.log('     ‚úÖ Fallback data creado para PDF');
    
    return {
      success: true,
      data: fallbackData,
      rawResponse: "PDF procesado con m√©todo de fallback"
    };
    
  } catch (error) {
    console.log('     ‚ùå ERROR en analyzePDFDocument:', error.message);
    return {
      success: false,
      error: `Error procesando PDF: ${error.message}`
    };
  }
}

// Simular IntelligentRouter y agente especializado
function simulateRouterAndSpecializedAgent(classification, extractedContent) {
  console.log('   üîÑ IntelligentRouter ruteando...');
  
  const agentId = classification.routingRecommendation;
  console.log('   üéØ Ruteando a:', agentId);
  
  // Simular agente administrativo (para boleta)
  if (agentId === 'administrative_agent') {
    return simulateAdministrativeAgent(extractedContent, classification);
  } else {
    return simulateMedicalAgent(extractedContent, classification);
  }
}

// Simular AdministrativeAgent
function simulateAdministrativeAgent(content, classification) {
  console.log('   üíº AdministrativeAgent procesando...');
  
  const adminAnalysis = {
    date: new Date(),
    cost: null,
    provider: 'Proveedor extra√≠do del PDF',
    service: 'Servicio m√©dico',
    documentType: 'medical_bill'
  };
  
  const historicalRecord = {
    id: `admin_${Date.now()}`,
    type: 'administrative',
    value: adminAnalysis,
    date: adminAnalysis.date,
    source: 'administrative_agent',
    confidence: 0.8,
    metadata: { documentType: adminAnalysis.documentType },
    createdAt: new Date(),
    updatedAt: new Date()
  };
  
  return {
    agentId: 'administrative_agent',
    classification: classification.contentType,
    extractedData: adminAnalysis,
    confidence: classification.confidence,
    recommendations: ['Archivar documento administrativo'],
    shouldUpdateFicha: false,
    historicalData: [historicalRecord],
    timestamp: new Date()
  };
}

// Simular MedicalAgent
function simulateMedicalAgent(content, classification) {
  console.log('   ‚öïÔ∏è MedicalAgent procesando...');
  
  const medicalAnalysis = {
    symptoms: [],
    diagnoses: [],
    treatments: [],
    alerts: [],
    followUp: []
  };
  
  return {
    agentId: 'medical_agent',
    classification: classification.contentType,
    extractedData: medicalAnalysis,
    confidence: classification.confidence,
    recommendations: ['Revisar con pediatra si hay dudas'],
    shouldUpdateFicha: true,
    timestamp: new Date()
  };
}

// Simular FichaMAxiAgent
function simulateFichaMaxiAgent(agentOutput) {
  console.log('   üîÑ FichaMAxiAgent actualizando...');
  
  if (!agentOutput.shouldUpdateFicha) {
    console.log('   ‚û°Ô∏è No necesita actualizar ficha');
    return;
  }
  
  console.log('   üíæ Actualizando ficha m√©dica...');
  
  if (agentOutput.historicalData) {
    console.log('   üìä Guardando registros hist√≥ricos:', agentOutput.historicalData.length);
  }
}

// Test espec√≠fico para encontrar el error "K.primaryType"
function testSpecificError() {
  console.log('üß™ TEST ESPEC√çFICO PARA ERROR "K.primaryType"');
  console.log('');
  
  // Este error suele ocurrir en operaciones con archivos o cuando se intenta
  // acceder a propiedades de objetos que son undefined
  
  console.log('üîç Posibles causas del error:');
  console.log('1. üìÑ File object corrupto o malformado');
  console.log('2. üîó Import din√°mico que falla');
  console.log('3. üì¶ Problema con el bundle de Vite/Webpack');
  console.log('4. üéØ Variable undefined en contexto de ejecuci√≥n');
  console.log('');
  
  // Simular escenarios problem√°ticos
  console.log('üß™ Simulando escenarios problem√°ticos:');
  
  // Escenario 1: File object inv√°lido
  console.log('üìù Escenario 1: File object inv√°lido');
  try {
    const invalidFile = { type: 'application/pdf' }; // Missing File properties
    simulateVisionAgent({ content: invalidFile });
  } catch (error) {
    console.log('‚ùå Error capturado:', error.message);
  }
  
  // Escenario 2: Import din√°mico fallando
  console.log('üìù Escenario 2: Import din√°mico problem√°tico');
  try {
    // Este podr√≠a ser el problema - el import din√°mico en VisionAgent
    console.log('‚ö†Ô∏è SOSPECHA: import("./visionAnalysisService") puede estar fallando');
    console.log('üí° SOLUCI√ìN: Cambiar a import est√°tico');
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }
  
  console.log('');
}

// Ejecutar todas las simulaciones
function runAllTests() {
  console.log('üöÄ EJECUTANDO DEBUG COMPLETO DEL FLUJO MULTIAGENTE');
  console.log('='.repeat(60));
  
  simulateMultiAgentFlow();
  testSpecificError();
  
  console.log('='.repeat(60));
  console.log('üîç CONCLUSIONES DEL AN√ÅLISIS:');
  console.log('');
  console.log('‚ùå PROBLEMA IDENTIFICADO:');
  console.log('   ‚Ä¢ Error "K.primaryType" sugiere problema en import din√°mico');
  console.log('   ‚Ä¢ VisionAgent usa: await import("./visionAnalysisService")');
  console.log('   ‚Ä¢ Esto puede causar problemas en el bundle o ejecuci√≥n');
  console.log('');
  console.log('üí° SOLUCIONES PROPUESTAS:');
  console.log('1. üîß Cambiar import din√°mico a est√°tico en VisionAgent');
  console.log('2. üõ°Ô∏è A√±adir try/catch m√°s robusto');
  console.log('3. üîç Agregar logs detallados en cada paso');
  console.log('4. üß™ Verificar que el File object sea v√°lido');
  console.log('');
  console.log('üéØ PASOS PARA CORREGIR:');
  console.log('1. Modificar VisionAgent para import est√°tico');
  console.log('2. Agregar validaci√≥n robusta de File object');
  console.log('3. Mejorar manejo de errores en toda la cadena');
  console.log('4. A√±adir logs de debug para rastrear el flujo');
}

// Ejecutar an√°lisis
runAllTests();