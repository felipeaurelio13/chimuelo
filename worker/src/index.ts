// Simple worker with OpenAI functionality and fallbacks

interface Env {
  OPENAI_API_KEY?: string;
  JWT_SECRET?: string;
  RATE_LIMIT_KV?: KVNamespace;
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

// Respuestas de fallback m√©dicas inteligentes
const medicalFallbackResponses = {
  fiebre: `Para la fiebre en beb√©s:

üå°Ô∏è **Medidas inmediatas:**
‚Ä¢ Si es menor de 3 meses y tiene fiebre > 38¬∞C: **Consulta inmediatamente al pediatra**
‚Ä¢ Entre 3-6 meses: consulta si supera los 38.5¬∞C
‚Ä¢ Mant√©n al beb√© hidratado con frecuencia
‚Ä¢ V√≠stelo con ropa ligera y fresca

üíä **Medicaci√≥n:**
‚Ä¢ Solo paracetamol seg√∫n indicaci√≥n m√©dica
‚Ä¢ Nunca aspirina en menores de 16 a√±os
‚Ä¢ Respeta dosis seg√∫n peso y edad

‚ö†Ô∏è **Consulta urgente si hay:**
‚Ä¢ Dificultad para respirar ‚Ä¢ Manchas en la piel ‚Ä¢ V√≥mitos persistentes ‚Ä¢ Letargo extremo

*Esta informaci√≥n es orientativa. Siempre consulta con tu pediatra.*`,

  alimentacion: `Sobre alimentaci√≥n y peso:

üçº **Lactancia:**
‚Ä¢ Lactancia exclusiva hasta los 6 meses
‚Ä¢ A demanda, no por horarios r√≠gidos
‚Ä¢ Se√±ales de hambre: b√∫squeda, succi√≥n, movimientos de boca

üìà **Crecimiento:**
‚Ä¢ Los beb√©s duplican su peso de nacimiento a los 5 meses
‚Ä¢ Cada beb√© tiene su ritmo √∫nico
‚Ä¢ Lo importante es la curva de crecimiento, no n√∫meros absolutos

ü•Ñ **Alimentaci√≥n complementaria (6+ meses):**
‚Ä¢ Introducir alimentos gradualmente
‚Ä¢ Un alimento nuevo cada 3-5 d√≠as
‚Ä¢ Texturas apropiadas para la edad

üìä **Consulta las curvas de crecimiento con tu pediatra regularmente.**`,

  desarrollo: `Desarrollo infantil por etapas:

üë∂ **0-3 meses:**
‚Ä¢ Sostiene la cabeza brevemente ‚Ä¢ Sigue objetos con la mirada ‚Ä¢ Sonr√≠e socialmente ‚Ä¢ Reacciona a sonidos

üë∂ **3-6 meses:**
‚Ä¢ Control de cabeza ‚Ä¢ Se voltea ‚Ä¢ Agarra objetos ‚Ä¢ Balbucea ‚Ä¢ Reconoce voces familiares

üë∂ **6-9 meses:**
‚Ä¢ Se sienta con apoyo ‚Ä¢ Transfiere objetos entre manos ‚Ä¢ Dice s√≠labas ‚Ä¢ Ansiedad por extra√±os

üë∂ **9-12 meses:**
‚Ä¢ Gatea o se desplaza ‚Ä¢ Se pone de pie ‚Ä¢ Pinza digital ‚Ä¢ Primeras palabras ‚Ä¢ Juegos de imitaci√≥n

‚ö†Ô∏è **Cada beb√© se desarrolla a su ritmo. Si tienes dudas, consulta con tu pediatra.**`,

  sueno: `Patrones de sue√±o saludables:

üåô **Reci√©n nacidos (0-3 meses):**
‚Ä¢ 14-17 horas/d√≠a en per√≠odos de 2-4 horas
‚Ä¢ Despertares nocturnos normales para alimentaci√≥n
‚Ä¢ Confusi√≥n d√≠a/noche es normal

üò¥ **3-6 meses:**
‚Ä¢ 12-15 horas/d√≠a ‚Ä¢ Per√≠odos m√°s largos de sue√±o nocturno
‚Ä¢ Siestas m√°s regulares ‚Ä¢ Rutinas de sue√±o beneficiosas

üõèÔ∏è **6+ meses:**
‚Ä¢ 11-14 horas/d√≠a ‚Ä¢ Puede dormir toda la noche
‚Ä¢ 2-3 siestas diurnas ‚Ä¢ Rutinas consistentes importantes

üí° **Consejos:**
‚Ä¢ Ambiente tranquilo y oscuro ‚Ä¢ Temperatura fresca (18-20¬∞C)
‚Ä¢ Rutina relajante antes de dormir ‚Ä¢ Evitar pantallas 1 hora antes

*Consulta con tu pediatra si hay cambios dr√°sticos en el sue√±o.*`,

  vacunas: `Calendario de vacunaci√≥n (Espa√±a):

üíâ **Primeros meses:**
‚Ä¢ **Nacimiento:** BCG (si indicada), Hepatitis B
‚Ä¢ **2 meses:** DTPa-VPI, Hib, Neumococo, Rotavirus
‚Ä¢ **4 meses:** DTPa-VPI, Hib, Neumococo, Rotavirus
‚Ä¢ **6 meses:** DTPa-VPI, Hib, Neumococo, Rotavirus (si indicada)

üíâ **Primer a√±o:**
‚Ä¢ **12 meses:** SRP (sarampi√≥n, rub√©ola, parotiditis), Neumococo, Meningococo C
‚Ä¢ **15-18 meses:** DTPa-VPI, Hib, Varicela

üìÖ **Importante:**
‚Ä¢ Mant√©n el carnet de vacunaci√≥n actualizado
‚Ä¢ Las vacunas pueden variar seg√∫n la comunidad aut√≥noma
‚Ä¢ Consulta con tu pediatra el calendario espec√≠fico

‚ö†Ô∏è **No retrases las vacunas sin consultar con tu m√©dico.**`,

  general: `Como asistente de salud infantil, te ayudo con informaci√≥n sobre el cuidado de tu beb√©.

ü©∫ **√Åreas en las que puedo ayudarte:**
‚Ä¢ Control de peso y alimentaci√≥n
‚Ä¢ Desarrollo y hitos evolutivos  
‚Ä¢ Patrones de sue√±o y descanso
‚Ä¢ Calendario de vacunaci√≥n
‚Ä¢ Manejo de s√≠ntomas comunes
‚Ä¢ Cu√°ndo consultar al pediatra

üìã **Recomendaciones generales:**
‚Ä¢ Lleva un registro detallado de s√≠ntomas y cambios
‚Ä¢ Observa el comportamiento general del beb√©
‚Ä¢ Mant√©n comunicaci√≥n regular con tu pediatra
‚Ä¢ Conf√≠a en tu instinto parental

‚ö†Ô∏è **Importante:** Esta informaci√≥n es orientativa. Para diagn√≥sticos y tratamientos espec√≠ficos, siempre consulta con un profesional de la salud.

¬øEn qu√© √°rea espec√≠fica te gustar√≠a que te ayude?`
};

function generateFallbackResponse(userMessage: string): string {
  const message = userMessage.toLowerCase();
  
  if (message.includes('fiebre') || message.includes('temperatura') || message.includes('¬∞c')) {
    return medicalFallbackResponses.fiebre;
  }
  
  if (message.includes('peso') || message.includes('alimenta') || message.includes('come') || message.includes('lactancia')) {
    return medicalFallbackResponses.alimentacion;
  }
  
  if (message.includes('desarrollo') || message.includes('hito') || message.includes('gatear') || message.includes('caminar') || message.includes('hablar')) {
    return medicalFallbackResponses.desarrollo;
  }
  
  if (message.includes('sue√±o') || message.includes('duerme') || message.includes('siesta') || message.includes('noche')) {
    return medicalFallbackResponses.sueno;
  }
  
  if (message.includes('vacuna') || message.includes('inmuni') || message.includes('calendario')) {
    return medicalFallbackResponses.vacunas;
  }
  
  return medicalFallbackResponses.general;
}

export default {
  async fetch(request: Request, env: Env): Promise<Response> {
    try {
      const url = new URL(request.url);
      
      // Handle CORS preflight
      if (request.method === 'OPTIONS') {
        return new Response(null, { headers: corsHeaders });
      }
      
      // Health endpoint
      if (url.pathname === '/health') {
        const hasOpenAI = !!env?.OPENAI_API_KEY;
        return new Response(JSON.stringify({
          success: true,
          message: 'Chimuelo Worker is healthy',
          version: '1.0.0',
          features: hasOpenAI ? ['health', 'openai', 'fallback'] : ['health', 'fallback'],
          openai_configured: hasOpenAI,
          fallback_enabled: true,
          timestamp: new Date().toISOString()
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
      
      // OpenAI Chat endpoint with fallback
      if (url.pathname === '/api/openai/chat' && request.method === 'POST') {
        const body = await request.json() as any;
        
        if (!body?.messages || !Array.isArray(body.messages)) {
          return new Response(JSON.stringify({
            success: false,
            error: 'Messages are required'
          }), {
            status: 400,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          });
        }

        // Try OpenAI first if API key is available
        if (env?.OPENAI_API_KEY) {
          try {
            const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                model: body.options?.model || 'gpt-4o-mini',
                messages: body.messages,
                temperature: body.options?.temperature || 0.7,
                max_tokens: body.options?.maxTokens || 500,
              }),
            });

            if (openaiResponse.ok) {
              const openaiData = await openaiResponse.json() as any;
              
              return new Response(JSON.stringify({
                success: true,
                data: {
                  response: openaiData.choices?.[0]?.message?.content || 'No response',
                  usage: openaiData.usage,
                  model: body.options?.model || 'gpt-4o-mini',
                  source: 'openai'
                },
                timestamp: new Date().toISOString()
              }), {
                headers: { ...corsHeaders, 'Content-Type': 'application/json' }
              });
            }
          } catch (openaiError) {
            console.log('OpenAI failed, using fallback:', openaiError);
          }
        }

        // Fallback response
        const userMessage = body.messages[body.messages.length - 1]?.content || '';
        const fallbackResponse = generateFallbackResponse(userMessage);
        
        return new Response(JSON.stringify({
          success: true,
          data: {
            response: fallbackResponse,
            model: 'fallback-medical-assistant',
            source: 'fallback',
            note: env?.OPENAI_API_KEY ? 
              '‚ö†Ô∏è OpenAI no disponible temporalmente. Usando respuestas m√©dicas predefinidas.' :
              '‚ÑπÔ∏è Usando respuestas m√©dicas predefinidas.'
          },
          timestamp: new Date().toISOString()
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
      
      // Default 404 response
      return new Response(JSON.stringify({
        success: false,
        error: 'Endpoint not found',
        path: url.pathname,
        available_endpoints: ['/health', '/api/openai/chat']
      }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
      
    } catch (error) {
      console.error('Worker error:', error);
      return new Response(JSON.stringify({
        success: false,
        error: 'Internal server error: ' + String(error)
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
  }
};
